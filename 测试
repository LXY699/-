-- 汉化脚本优化版
-- 改进内容：安全性、稳定性、性能优化

local Translations = {
    ["Misc"] = "杂项",
    ["Gun Mods"] = "枪械修改",
    ["Teleports"] = "传送",
    ["Player Settings"] = "玩家设置",
    ["GUI Settings"] = "界面设置",
    ["Information"] = "信息",
    ["FARM KILLS"] = "刷击杀",
    ["ESP Kill Guns"] = "枪械高亮显示",
    ["ESP"] = "玩家高亮显示",
    ["Fake INF Rebirths"] = "伪造无限重生",
    ["Fake INF Kills"] = "伪造无限击杀",
    ["INF Ammo"] = "无限子弹",
    ["Make Ur Gun Auto"] = "枪械全自动",
    ["Rapid Fire"] = "快速射击",
    ["No Recoil"] = "无后坐",
    ["One Hit"] = "一击秒杀",
    ["INF Range"] = "无限射程",
    ["Instant Reload"] = "秒换弹",
    ["Super Bullet Speed"] = "子弹速度变快",
    ["Big Ammo"] = "子弹变大",
    ["Open All"] = "开启全部（子弹带散弹效果-子弹带爆炸效果-子弹变大除外）",
    ["Make Ur Gun Explosive"] = "子弹带爆炸效果",
    ["Make Ur Gun Shotgun"] = "子弹带散弹效果",
    ["Equip All Guns"] = "装备所有枪械",
    ["Instant E Button"] = "快速交互键（E 键）",
    ["Get Starter Pistol"] = "获取初始手枪（需要0击杀）",
    ["Get UZI"] = "获取乌兹冲锋枪（需要5次击杀）",
    ["Get Remington Shotgun"] = "获取雷明顿霰弹枪（需要15次击杀）",
    ["Get Ruger"] = "获取鲁格手枪（需要50次击杀）",
    ["Get AK47"] = "获取AK47（需要70次击杀）",
    ["Get M16A2"] = "获取M16A2（需要90次击杀）",
    ["Get Heckler Sniper"] = "获取Heckler狙击枪（需要100次击杀）",
    ["Get Bazooka"] = "获取火箭筒（需要150次击杀）",
    ["Get Ice Generator"] = "获取冰生成器（需要200次击杀）",
    ["Spawn"] = "出生点",
    ["Lobby"] = "大厅",
    ["Cyborg Boss"] = "赛博格boss",
    ["Mad Killer Boss"] = "疯狂杀手boss",
    ["Map Skeleton"] = "地图骨架",
    ["Robloxia Town"] = "罗布乐思镇",
    ["Click This"] = "点击这里（如果上帝模式失效点击这里修复上帝模式）",
    ["Make God Mode NO DAMAGE"] = "设置上帝模式（免疫伤害）",
    ["Get Guns"] = "获取枪械",
    ["God Mode"] = "上帝模式",
    ["Super Speed"] = "速度变超快（死亡重置）",
    ["Super Jump"] = "跳跃跳的超高（死亡重置）",
    ["Interface"] = "界面",
    ["Theme"] = "主题",
    ["Transparency"] = "透明度",
    ["Minimize Bind"] = "最小化按键绑定",
    ["Config name"] = "配置名称",
    ["Config list"] = "配置列表",
    ["Create config"] = "创建配置",
    ["Load config"] = "加载配置",
    ["Overwrite config"] = "覆盖配置",
    ["Refresh list"] = "刷新列表",
    ["Set as autoload"] = "设置自动加载",
}

-- 缓存已翻译的对象，避免重复处理
local translatedObjects = {}
local translationCache = {}

-- 优化的翻译函数
local function translateText(text)
    if not text or type(text) ~= "string" or text == "" then
        return text
    end
    
    -- 检查缓存
    if translationCache[text] then
        return translationCache[text]
    end
    
    -- 精确匹配
    if Translations[text] then
        translationCache[text] = Translations[text]
        return Translations[text]
    end
    
    -- 部分匹配（更安全的替换）
    local translated = text
    for en, cn in pairs(Translations) do
        if string.find(translated, en, 1, true) then -- 使用简单搜索，避免模式匹配
            translated = string.gsub(translated, en, cn)
        end
    end
    
    translationCache[text] = translated
    return translated
end

-- 安全的对象处理函数
local function safeTranslateGuiObject(guiObject)
    if translatedObjects[guiObject] then
        return
    end
    
    local success, result = pcall(function()
        if guiObject:IsA("TextLabel") or guiObject:IsA("TextButton") or guiObject:IsA("TextBox") then
            local currentText = guiObject.Text
            if currentText and currentText ~= "" then
                local translatedText = translateText(currentText)
                if translatedText ~= currentText then
                    guiObject.Text = translatedText
                    translatedObjects[guiObject] = true
                end
            end
        end
    end)
    
    if not success then
        -- 静默处理错误，避免影响其他翻译
    end
end

-- 优化的扫描函数
local function optimizedScanAndTranslate(parent)
    local success, descendants = pcall(function()
        return parent:GetDescendants()
    end)
    
    if not success then
        return
    end
    
    for _, descendant in ipairs(descendants) do
        safeTranslateGuiObject(descendant)
    end
end

-- 设置监听器
local function setupDescendantListener(parent)
    local success, connection = pcall(function()
        return parent.DescendantAdded:Connect(function(descendant)
            task.wait(0.05) -- 减少等待时间
            safeTranslateGuiObject(descendant)
        end)
    end)
    
    return success and connection
end

-- 主初始化函数
local function initializeTranslationEngine()
    print("正在初始化汉化引擎...")
    
    -- 初始化核心界面
    local coreGui = game:GetService("CoreGui")
    optimizedScanAndTranslate(coreGui)
    setupDescendantListener(coreGui)
    
    -- 初始化玩家界面
    local players = game:GetService("Players")
    local player = players.LocalPlayer
    
    if player then
        local function setupPlayerGui()
            local playerGui = player:WaitForChild("PlayerGui", 10) -- 10秒超时
            if playerGui then
                optimizedScanAndTranslate(playerGui)
                setupDescendantListener(playerGui)
            end
        end
        
        -- 延迟初始化玩家界面
        task.spawn(setupPlayerGui)
        
        -- 监听玩家重生成
        player.CharacterAdded:Connect(function()
            task.wait(2) -- 等待角色加载完成
            setupPlayerGui()
        end)
    end
    
    -- 优化的轮询扫描（降低频率）
    task.spawn(function()
        while true do
            task.wait(5) -- 从3秒增加到5秒，减少性能消耗
            
            pcall(function()
                optimizedScanAndTranslate(coreGui)
                if player and player:FindFirstChild("PlayerGui") then
                    optimizedScanAndTranslate(player.PlayerGui)
                end
            end)
        end
    end)
    
    print("汉化引擎初始化完成")
end

-- 安全的内容验证函数
local function verifyExternalContent(content)
    if not content or type(content) ~= "string" then
        return false, "内容为空或不是字符串"
    end
    
    -- 检查内容长度
    if #content > 100000 then -- 限制内容大小
        return false, "内容过大"
    end
    
    -- 检查危险模式（简单检查）
    local dangerousPatterns = {
        "while true do",
        "repeat until false",
        "coroutine%.yield%(%s*%)",
        "setfenv",
        "getfenv",
        "loadstring%(%s*%[%["
    }
    
    for _, pattern in ipairs(dangerousPatterns) do
        if string.find(content, pattern) then
            return false, "检测到可疑代码模式"
        end
    end
    
    return true, "内容安全"
end

-- 安全加载外部脚本
local function safeLoadExternalScript()
    local url = "https://pastefy.app/iMvROasz/raw"
    
    print("正在安全加载外部脚本...")
    
    local success, content = pcall(function()
        return game:HttpGet(url, true) -- 启用缓存
    end)
    
    if not success then
        warn("加载外部脚本失败:", content)
        return
    end
    
    -- 验证内容
    local isValid, validationMsg = verifyExternalContent(content)
    if not isValid then
        warn("内容验证失败:", validationMsg)
        return
    end
    
    print("内容验证通过，正在执行...")
    
    -- 在沙盒环境中执行
    local sandboxEnv = {
        print = print,
        warn = warn,
        task = task,
        pcall = pcall,
        xpcall = xpcall,
        game = game,
        wait = task.wait,
        _G = {},
        getfenv = function() return sandboxEnv end,
        setfenv = function(f, env) return f end
    }
    
    -- 设置元表来限制访问
    setmetatable(sandboxEnv, {
        __index = function(self, key)
            return rawget(self, key) or nil
        end,
        __newindex = function(self, key, value)
            rawset(self, key, value)
        end
    })
    
    local loadSuccess, loadError = pcall(function()
        local fn = loadstring(content)
        if fn then
            setfenv(fn, sandboxEnv)
            return fn()
        end
    end)
    
    if not loadSuccess then
        warn("执行外部脚本失败:", loadError)
    else
        print("外部脚本执行成功")
    end
end

-- 主执行流程
task.wait(2) -- 初始等待

-- 初始化汉化引擎
initializeTranslationEngine()

-- 可选：安全加载外部脚本（默认禁用）
-- safeLoadExternalScript()

print("汉化脚本优化版加载完成")
